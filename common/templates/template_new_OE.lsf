addpath('/home/nickersonm/lumerical/common');   # Replace as necessary, optionally adding multiple potential locations for different environments
util_fCommon;    # Load common functions

### Documentation
## Units: µm lengths, cm^-1 loss, 1e18 cm^-3 doping
## Required variables
#   etchDef:    cell list of etches, each element being a structure with fields:
#       .depth      etch depth from top of epitaxy
#       .width      width of the etch region, unused if .start is specified
#       .length     length of the etch region, unused if .end is specified
#     Optional etchDef fields:
#       .layer      calculates etch depth from 'epitaxy' matrix (counting from top); overrides .depth if specified
#           Requires 'epitaxy' cell list of epitaxial layers
#       .wgspace    generates appropriate etches for a waveguide with the specified .width, using this field as
#                       an exclusion zone (etch width on each side)
#       .start      [x0,y0,w0] start location and width, default prev.end or [0,0,width]
#       .end        [x1,y1,w1] end location and width, default start+[length,0,0]
#       .name       name for the etch object, default 'etch#'
#       .res        minimum transverse resolution for this region; will generate simRes matrix, can be [res,yMin,yMax,xMin,xMax]
#       .cells      number of EME cells for this waveguide; will generate simCellLen and simCellN matrix; default 1
#       .bend       [EME and MODE] bend radius for this waveguide; will generate simBend
#       .sbend      [EME only] maximum bend radius for an s-bend; will generate appropriate structure for an s-bend with .cells distinct segments
#       .poly       [[x], [y]] polygon fully defining extents of etch; overrides all other xy size specifications
#       .thickness  specify thickness [µm]; appends to 'epitaxy' cell list as .material='Au', .meshorder=1 with given .thickness, .z, .poly
#       .material   specify material other than 'etch', optionally combine with '.thickness'
#       .angle      specify etch angle; will shift top and bottom polygon points
#   
#   epitaxy:    cell list of epitaxial layers, top-down, each element being a structure with fields:
#       .material   epitaxial material; currently supported: any built-in, 'AlGaAs', 'SiO2', 'SiN' , 'InGaP', 'InGaAs', 'GaAsP', 'LiNbO3_x', 'LiNbO3_z', 'AlOx', 'Au', 'Si'
#       .thickness  layer thickness
#     Optional epitaxy fields:
#       .x          composition of first element; default 0, currently supported: 'AlGaAs', 'InGaAs', 'GaAsP'
#       .doping     dopant concentration [e18 cm^-3]; negative for n-doped, positive for p-doped
#       .name       override default layer name
#       .qw         quantum well thickness, overrides 'thickness', adjacent 'qw' materials simulated and added as single material
#       .guiding    use as assumed guiding region; default determined by lowest loss
#       .color      optional material color as [R, G, B, A]
#       .meshorder  specify mesh order; 'etch' is 1
#       .z          specify z-location of bottom of layer; removes cell from layer calculations, e.g. for metal pads
#       .poly       xy polygon defining layer, e.g. for metal pads; if not used with '.z', gaps will be present in epitaxy
#       .xmax       maximum x extent
#       .xmin       minimum x extent
#   
#   CHARGE only:
#       contacts:   cell list of electrical contacts, each element being a structure with fields:
#           .name       existing geometry name or new geometry (requires .dz and .poly below)
#           .V          array of potentials to apply (optionally scalar)
#           Optional contacts fields:
#           .poly       xy polygon defining new geometry
#           .dz         z-extents of new geometry
#           .material   supported material for new geometry; default 'Au'
#           .meshorder  specify mesh order; default 1
# 
# 
## Optional variables
#   regrowth:   structure with regrowth definition with fields:
#       .xmin       minimum x extent of regrowth etch, modifies 'epitaxy'
#       .xmax       maximum x extent of regrowth etch, modifies 'epitaxy'; ignored if xmin set
#       .depth      etch depth to remove original epitaxy to; either depth or layer required
#       .layer      auto-compute etch depth from given epitaxy layer (etch-to, not etch-through)
#       .epitaxy    cell list of regrowth epitaxial layers, same as standard epitaxy
#   sim2D:      '0' for full 3D EME, FDTD, or CHARGE, '1' for YZ FDE or CHARGE, '2' for XY varFDTD, FDTD, or CHARGE; default 2
#   etchMat:    material for etches, default 'etch'
#   simX:       [min, max] longitudinal simulation span, default epitaxy extents
#   simY:       [min, max] transverse simulation span, default epitaxy extents less PML
#   simZ:       [min, max] vertical simulation span, default epitaxy extent plus buffer
#   simZlayer:  calculate minimum Z extent as this epitaxial layer, overrides simZ
#   simBuffer:  buffers for ports, monitors, etc; default 1 [µm]
#   simAccuracy:auto-mesh accuracy setting, where applicable; default 4
#   simRes:     mesh size in normal regions [µm], can be matrix of [res,yMin,yMax,[xMin,xMax]]; default 0.25
#   simResSub:  mesh size in substrate region [µm], default 0.25
#   simResFine: maximum mesh size in guiding region [µm], default 0.05
#   simMon:     output port/monitor, cell of structures
#       .type   Optical: 'port', 'E', 'n', 'mov', 'time'; CHARGE: 'Q', 'E', 'BS', 'I'
#     Optional fields:
#           .geo    'x', 'z', 'y', 'point', 'xy', 'yz', or 'xz'; optical default 'yz', CHARGE default 'z'
#           .x      x location or span; default simX or max(simX), can specify 'in' or 'out'
#           .y      y location or span; default simY or mean(simX)
#           .z      z location or span; default simZ or mean(simZ)
#           .name   name of monitor; default 'mon_<#>_<type>'
#     Optional fields for 'port' only:
#           .pol    E-field polarization, where applicable, 0 for TE (+y), 1 for TM (+z); default 0
#           .rot    input rotation around z axis [degrees]; default 0
#           .amp    modify relative amplitude; default 1
#           .phase  phase offset for this port
#           .mfd    use gaussian source with this MFD [µm], <0 for plane wave; if 3-vector, use [MFD, y, z] for recentering
#         Custom Field (where applicable):
#           .y      y spatial vector, also sets location
#           .z      z spatial vector, also sets location
#           .power  spatial matrix defining modal power
#           .field  3-dimensional matrix defining [Ex, Ey, Ez, [Hx, Hy, Hz]] fields, overrides .power and .pol
#     Default simMon, always included:
#           CHARGE: { {'type': 'Q', 'loc': [0,0,0]}, {'type': 'E', 'loc': [0,0,0]}, {'type': 'BS', 'loc': [0,0,0]} }
#           Optical: Index and Field for xy plane, input, and output, name <location><type>
#   monYZ:     global default [simMon.y, simMon.z]; default [simY, simZ]
#   
#   Optical solvers
#       lambda:     wavelength [µm] (partially implemented); default 1.03
#       simPol:     polarization of simulation for 2D simulations; 0 for TE (+y), 1 for TM (+z), default 0
#       simPML:     number of mesh periods for PML border, where applicable; default 8
#       inPort:     input port settings, cell of structures as with 'simMon', type 'port' only
#         Optional fields:
#               .x      x location; default min(simX)
#               .y      y location or span; default simY or mean(simX)
#               .z      z location or span; default simZ or mean(simZ)
#               .name   name of monitor; default 'port_<#>'
#               .pol    E-field polarization, where applicable, 0 for TE (+y), 1 for TM (+z); default 0
#               .rot    input rotation around z axis [degrees]; default 0
#               .amp    modify relative amplitude; default 1
#               .phase  phase offset for this port
#               .mfd    use gaussian source with this MFD [µm], <0 for plane wave; if 3-vector, use [MFD, y, z] for recentering
#             Custom Field (where applicable):
#               .y      y spatial vector, also sets location
#               .z      z spatial vector, also sets location
#               .power  spatial matrix defining modal power
#               .field  3-dimensional matrix defining [Ex, Ey, Ez, [Hx, Hy, Hz]] fields, overrides .power and .pol
#         Default inPort: {{'pol': '0'}}
#   
#   EME and FDE only
#       simModes:   number of modes to search; linearly impacts memory, default 250
#       simModeN:   search near this index, if provided positive number; default -1 ('near max n')
#       simBend:    enable bend radius for given segments, [xMin, xMax, radius]



### New simulation
clear; newproject;
clear; newproject;
cd(filedirectory(currentscriptname));


## Set customizations
# Defaults
wWG = 2;
lWG = 20;
N = 3;
lTaperIn = 5;
lTaperOut = 5;
dTaper = 0.5;
spaceWG = 2;
etchLayer = 9;
padDepth = 4.5;
lambda = 1.03;
inShift = 0;
inMFD = 0;
etchRot = 0;

# Calculated parameters: MMI - see MMI.nb; high contrast assumed
N = max([round(N), 1]); # Must be at least 1 output
nr = 3.446;
wMMI = MMI_w(N, spaceWG, wWG);
lMMI = MMI_l(wMMI, nr, lambda, N);

lMMI = lMMI - lTaperIn - lTaperOut;

y = MMI_y(wMMI, N);

# Basic parameters
sim2D = 0;  # '0' for full 3D EME, FDTD, or CHARGE, '1' for YZ FDE or CHARGE, '2' for XY varFDTD, FDTD, or CHARGE
savName = 'test_sim';

simY = wMMI + 5;

facetX = 2*lWG + lTaperIn + lMMI + lTaperOut;

## Etches
etchDef = {
    {'name': 'Input', 'wgspace': simY/2, 'width': wWG, 'length': lWG, 'layer': etchLayer},
    {'name': 'taperIn', 'wgspace': simY/2, 'end': [lWG + lTaperIn, 0, wMMI], 'layer': etchLayer},
    
    {'name': 'MMI', 'wgspace': 6, 'length': lMMI, 'layer': etchLayer},
    
    {'name': 'taperOutside', 'wgspace': simY/2, 'end': [lWG + lTaperIn + lMMI + lTaperOut, 0, 2*max(y) + wWG], 'layer': etchLayer},
    {'name': 'OutBorders', 'wgspace': simY/2, 'length': lWG, 'layer': etchLayer},
    
    {'name': 'Npad', 'start': [0,0,simY], 'length': lWG/2, 'depth': padDepth, 'thickness': 0.2},
    {'name': 'Ppad', 'start': [0,0,wWG*0.75], 'length': lWG/2, 'depth': 0.05, 'thickness': 0.2}
};

# Outputs: add between-output borders if >1 output
if( N > 1 ) {
    dy = y(2) - y(1);
    for( yi = (y(1:end-1) + dy/2) ) {
        etchDef = appendcell(etchDef, {
            {'name': 'taperBetween', 'start': [lWG + lTaperIn + lMMI, yi, dTaper], 'end': [lWG + lTaperIn + lMMI + lTaperOut, yi, dy-wWG], 'layer': etchLayer},
            {'name': 'outBetween', 'length': lWG, 'layer': etchLayer}
        });
    }
    clear(dy, yi);   # Temporary variables only
}

epitaxy = {
    {'thickness':0.1, 'material':'GaAs',            'doping': 2.0},   # p-cap
    {'thickness':1.0, 'material':'AlGaAs', 'x':0.2, 'doping': 1.0},
    {'thickness':0.2, 'material':'AlGaAs', 'x':0.4, 'doping': 0.4},
    {'thickness':0.2, 'material':'AlGaAs', 'x':0.4, 'doping': 0.2},
    {'thickness':0.1, 'material':'GaAs',            'doping': 0.2},
    {'thickness':0.5, 'material':'GaAs',            'doping': 0.0, 'guiding': 1},
    {'thickness':0.1, 'material':'GaAs',            'doping':-0.2},
    {'thickness':0.2, 'material':'AlGaAs', 'x':0.3, 'doping':-0.2},
    {'thickness':0.4, 'material':'AlGaAs', 'x':0.2, 'doping':-0.2},
    {'thickness':1.0, 'material':'AlGaAs', 'x':0.2, 'doping':-2.0},
    {'thickness':0.3, 'material':'GaAs',            'doping':-3.0, 'name':'buffer'},
    {'thickness':5.0, 'material':'GaAs',            'doping':-1.0, 'name':'substrate'}
};


## Electrical contacts
contacts = {
    {'name': 'Ppad', 'V': 1},
    {'name': 'Npad', 'V': 0}   # Back-side contacted
};


## Set narrow z-limits
lGuide = find(matstruct(epitaxy, 'guiding'),1);
zGuide = -(sumstruct(epitaxy{1:lGuide}, 'thickness') - epitaxy{lGuide}.thickness/2);
simZ = [0.1, min(zGuide) - 2*epitaxy{lGuide}.thickness - 1];

# Expand to include contacts for CHARGE
if( isDEVICE() ) {
    # simZ(1) = -sumstruct(epitaxy{1:length(epitaxy)-1}, 'thickness') - 0.25;
    simZ = [-padDepth+0.05, 0.3];
    
    # Reduce unneeded Y-span    
    if( sim2D == 1 ) {
        simY = wWG + 1.5;
    }
}


## Build ports and monitors
# Nominal single-mode port size
monY = wWG * [-1, 1];

# Centered input port
inPort = { 'type': 'port', 'y': monY, 'mfd': [inMFD, inShift, 0] };

# Output monitors centered on output waveguides
simMon = cell(2*N);
for( i = 1:N ) {
    simMon{i} = {
        'type': 'port',
        'name': 'out_'+num2str(i)+'_port',
        'mfd': [inMFD, inShift, 0],
        'y': monY + y(i) * [1, 1]
    };
    simMon{N+i} = {
        'type': 'E',
        'name': 'out_'+num2str(i)+'_E',
        'geo': 'yz',
        'y': monY + y(i) * [1, 1]
    };
}
clear(y, i);

# If direction flipped, swap the ports
if( etchRot == 180 ) {
    tmpMode = inPort; inPort = simMon; simMon = tmpMode;
    clear(tmpMode);
}

# CHARGE monitor over guiding area
if( isDEVICE() ) {
    simMon = {{'name': 'monE_mode', 'type': 'E', 'geo': 'yz', 
               'x': [-wWG/2+0.05, wWG/2-0.05], 'z': zGuide + [-0.45, 0.45]*epitaxy{lGuide}.thickness}};
}

# Shrink simulation region if FDE
if( sim2D == 1 & isFDE() ) {
    simY = monY;
}


## Initialize and build
lum_setup;


## Save self
cd(filedirectory(currentscriptname));
save(replacestring(savName, '.', ''));
